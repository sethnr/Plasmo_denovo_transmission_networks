load("~/Google Drive/misc/macports_150504/pkglist.Rdata")
install.packages(save.pkg.list)
source("http://bioconductor.org/biocLite.R")
biocLite()
?write.table
afs_small <- data.frame(t(read.table("Scratch/gits/pfdisco/analyses/modelling_intraspec/qstages.C1.5m.L0.01mb.G36.mtp.AFs.txt",sep="\t",row.names=1)))
colnames(afs_small)<-c("mth","halfyr","yr")
afs_large <- data.frame(t(read.table("Scratch/gits/pfdisco/analyses/modelling_intraspec/qstages.C100.0m.L0.01mb.G36.mtp.AFs.txt",sep="\t",row.names=1)))
colnames(afs_large)<-c("mth","halfyr","yr")
plot(density(afs_large$mth),col="red") + lines(density(afs_small$yr),col="blue")
plot(density(subset(afs_large,mth>0.01)$mth),col="red") + lines(density(subset(afs_small,yr>0.01)$yr),col="blue")
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1)) + lines(density(subset(afs_small,yr>0.01)$yr),col="blue")
plot(density(afs_large$mth),col="red") + lines(density(afs_small$yr),col="blue")
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1)) + lines(density(subset(afs_small,yr>0.01)$yr),col="blue")
subset(afs_small,yr>0.01)$yr
length(subset(afs_small,yr>0.01)$yr)
length(subset(afs_large,mth>0.01)$mth)
length(subset(afs_small,yr>0.04)$yr)
length(subset(afs_small,yr>0.02)$yr)
length(subset(afs_large,mth>0.02)$mth)
c(length(subset(afs_large,mth>0.02)$mth),length(subset(afs_small,yr>0.02)$yr)
)
c(length(subset(afs_large,mth>0.02)$mth),length(subset(afs_small,yr>0.02)$yr))
c(length(subset(afs_large,mth>0.01)$mth),length(subset(afs_small,yr>0.01)$yr))
c(length(subset(afs_large,mth>0.02)$mth),length(subset(afs_small,yr>0.02)$yr))
c(length(subset(afs_large,mth>0.03)$mth),length(subset(afs_small,yr>0.03)$yr))
c(length(subset(afs_large,mth>0.02)$mth),length(subset(afs_small,halfyr>0.02)$halfyr)
)
c(length(subset(afs_large,mth>0.02)$mth),length(subset(afs_small,halfyr>0.02)$halfyr))
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1)) +
lines(density(subset(afs_small,halfyr>0.01)$halfyr),col="blue") +
lines(density(subset(afs_small,yr>0.01)$yr),col="dark blue")
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1)) +
lines(density(subset(afs_small,halfyr>0.01)$halfyr),col="blue") +
lines(density(subset(afs_small,yr>0.01)$yr),col="dark blue")
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1)) +
lines(density(subset(afs_small,halfyr>0.01)$halfyr),col="blue")
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1))
plot(density(subset(afs_large,mth>0.01)$mth),col="red",xlim=c(0,0.1)) +
lines(density(subset(afs_small,halfyr>0.01)$halfyr),col="blue") +
lines(density(subset(afs_small,yr>0.01)$yr),col="dark blue")
library(igraph)
edges <-textConnection"
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1"
edges <-textConnection("
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1")
edges
edges <- read.table(textConnection("
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1"),sep="\t")
edges
edges <- read.table(textConnection("
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1"))
edges
edges <- read.table(text="
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1"))
edges <- read.table(text="
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1")
steadystate <- read.table(text="
0 1 2
0 2 2
1 3 2
1 4 2
2 5 2
2 6 2
3 7 2
4 8 2
4 9 2
5 10 2
6 11 2
6 12 2")
graph.data.frame(steadystate, directed=F)
plot(graph.data.frame(steadystate, directed=F))
plot(graph.data.frame(steadystate, directed=T))
plot(graph.data.frame(superspreader, directed=T))
superspreader <- read.table(text="
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1")
steadystate <- read.table(text="
0 1 2
0 2 2
1 3 2
1 4 2
2 5 2
2 6 2
3 7 2
4 8 2
4 9 2
5 10 2
6 11 2
6 12 2")
plot(graph.data.frame(steadystate, directed=T))
plot(graph.data.frame(superspreader, directed=T))
?plot
source('~/.active-rstudio-document', echo=TRUE)
plot(graph.data.frame(superspreader, directed=T),)
superspreader <- read.table(text="
0 1 6 T
0 2 5 T
0 3 4 T
0 4 3 T
0 5 2 T
0 6 1 T")
steadystate <- read.table(text="
0 1 2 F
0 2 2 F
1 3 2 F
1 4 2 F
2 5 2 F
2 6 2 F
3 7 2 T
4 8 2 T
4 9 2 T
5 10 2 T
6 11 2 T
6 12 2 T")
plot(graph.data.frame(steadystate, directed=T))
plot(graph.data.frame(superspreader, directed=T))
dendPlot(graph.data.frame(superspreader, directed=T))
steadyG <- graph.data.frame(steadystate, directed=T)
superG <- graph.data.frame(superspreader, directed=T)
steadyG <- graph.data.frame(steadystate, directed=T)
superG <- graph.data.frame(superspreader, directed=T)
plot(steadyG)
plot(superG)
plot(as.dendrogram(steadyG))
dendPlot(as.dendrogram(steadyG))
as.dendrogram(steadyG)
g001 <- erdos.renyi.game(100, 1/10, directed = FALSE)
fc01 <- fastgreedy.community(g001)
fc01
g001
fc01
as.dendrogram(fc01)
as.dendrogram(g001)
superComm <- fastgreedy.community(superG)
superG <- graph.data.frame(superspreader, directed=T)
dendPlot(fastgreedy.community(superG))
superG <- graph.data.frame(superspreader, directed=F)
dendPlot(fastgreedy.community(superG))
dendPlot(fastgreedy.community(steadyG))
steadyG <- graph.data.frame(steadystate, directed=F)
superG <- graph.data.frame(superspreader, directed=F)
dendPlot(fastgreedy.community(superG))
dendPlot(fastgreedy.community(steadyG))
fastgreedy.community(superG)
fastgreedy.community(steadyG)
plot(steadyG)
subgraph.edges(steadyG, E(steadyG)[label %in% c(7:12)])
subgraph.edges(steadyG, E(steadyG)[V3 %in% c(7:12)])
plot(subgraph.edges(steadyG, E(steadyG)[V3 %in% c(7:12)]))
steadyG
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T))
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T])
)
?subgraph.edges
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T],delete_vertices=F)
)
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T],delete.vertices=F))
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T])
)
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T]))
superG<-set.edge.attribute(superG, "weight", index=E(superG), value=weights)
superG<-set.edge.attribute(superG, "weight", index=E(superG), value=V3)
set.edge.attribute
superG<-set.edge.attribute(superG, "weight", index=E(superG)[,3])
E(superG)[,3]
E(superG)[,3]
E(superG)
V(superG)
superG[,3]
superG[,2]
superG
superG$V3
superG[["V3"]]
superG["V3"]
steadyG <- graph.data.frame(steadystate, directed=F)
superG <- graph.data.frame(superspreader, directed=F)
plot(steadyG)
dendPlot(fastgreedy.community(steadyG))
fastgreedy.community(steadyG)
make_clusters(superG)
?VertexDendrogram
as.phylo(steadyG)
import(ape)
library(ape)
as.phylo(steadyG)
tr <- rtree(5)
tr
as.igraph(tr)
as.hclust(steadyG)
a <- list()  # initialize empty object
# define merging pattern:
#    negative numbers are leaves,
#    positive are merged clusters (defined by row number in $merge)
a$merge <- matrix(c(-1, -2,
-3, -4,
1,  2), nc=2, byrow=TRUE )
a$height <- c(1, 1.5, 3)    # define merge heights
a$order <- 1:4              # order of leaves(trivial if hand-entered)
a$labels <- LETTERS[1:4]    # labels of leaves
class(a) <- "hclust"        # make it an hclust object
plot(a)                     # look at the result
a$merge
plot(induced_subgraph(steadyG,c(7:12))
)
plot(induced_subgraph(steadyG,c(7:12),impl="create_from_scratch"))
plot(induced_subgraph(steadyG,c(7:12),impl="copy_and_delete"))
plot(steadyG)
steadyG <- graph.data.frame(steadystate, directed=T)
superG <- graph.data.frame(superspreader, directed=T)
plot(steadyG)
plot(superG)
steadyG
V(steadyG)
V(steadyG)[5]
E(steadyG)[5]
E(steadyG)
E(steadyG)$weights
E(steadyG)$weight
E(steadyG)$weight <- steadystate[,3]
plot(steadyG)
E(steadyG)$weight
superG <- graph.data.frame(superspreader, directed=T)
E(superG)$weight <- superspreader[,3]
plot(superG)
E(steadyG)$colour="red"
plot(steadyG)
superL <- layout.fruchterman.reingold(superG, weights=E(superG)$weight)
steadyL <- layout.fruchterman.reingold(steadyG, weights=E(steadyG)$weight)
superG <- graph.data.frame(superspreader, directed=T)
E(superG)$weight <- superspreader[,3]
superL <- layout.fruchterman.reingold(superG, weights=E(superG)$weight)
plot(steadyG,layout=superL)
E(superG)$weight
plot(steadyG,layout=steadyL)
plot(superG,layout=superL)
plot(steadyG,layout=steadyL)
superL <- layout.fruchterman.reingold(superG, weights=E(superG)$weight)
superL
g <- graph.ring(10)
E(g)$weight <- 1:2
l <- layout.fruchterman.reingold(g, weights=E(g)$weight)
plot(g, layout=l)
superL <- layout.drl(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
steadyL <- layout.drl(steadyG, weights=E(steadyG)$weight)
plot(steadyG,layout=steadyL)
superL <- layout.drl(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
superspreader <- read.table(text="
0 1 1 T
0 2 2 T
0 3 3 T
0 4 4 T
0 5 5 T
0 6 6 T")
steadystate <- read.table(text="
0 1 2 F
0 2 2 F
1 3 2 F
1 4 2 F
2 5 2 F
2 6 2 F
3 7 2 T
4 8 2 T
4 9 2 T
5 10 2 T
6 11 2 T
6 12 2 T")
steadyG <- graph.data.frame(steadystate, directed=T)
E(steadyG)$weight <- steadystate[,3]
superG <- graph.data.frame(superspreader, directed=T)
E(superG)$weight <- superspreader[,3]
steadyL <- layout.drl(steadyG, weights=E(steadyG)$weight)
plot(steadyG,layout=steadyL)
superL <- layout.drl(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
superL <- layout.sugiyama(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
superL <- layout.sugiyama(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
plot(superG,edge.length=E(superG)$weight)
plot(superG,edge.weight=E(superG)$weight)
plot(superG,edge.width=E(superG)$weight)
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(g)$weight))
list(weights=E(g)$weight)
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(g)$weight))
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(steadyG)$weight))
plot(steadyG,layout=steadyL)
superL <- layout.fruchterman.reingold(superG, params=list(weights=E(superG)$weight))
plot(superG,edge.width=E(superG)$weight)
plot(superG,layout=superL)
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(steadyG)$weight))
plot(steadyG,layout=steadyL)
?Dendrogram
??Dendrogram
cluster_leading_eigen(steadyG)
cluster_leading_eigen(subgraph(steadyG,v = c(7:12))
\c
plot(subgraph(steadyG,v = c(7:12)))
plot(subgraph(steadyG,v = c(8:13)))
plot(steradyG)
plot(steadyG)
layout(steadyG)
plot(subgraph(steadyG,v = c(8:13)))
plot(subgraph(steadyG,v = c(8:13)),layout=steadyG)
steadyG
steadyL
as.data.frame(steadyL)
ggplot(as.data.frame(steadyL),aes(x=V1,y=V2)) + geom_point()
library(ggplot2)
ggplot(as.data.frame(steadyL),aes(x=V1,y=V2)) + geom_point()
steadyL.df <- as.data.frame(steadyL)
steadyL.df$names <- V(steadyG)
steadyL.df$names <- steadystate[,3]
steadyL.df$names <- steadystate[7:12,3]
steadyL.df$names <- steadystate[,3]
steadyL.df$names <- c(0:12)
ggplot(as.data.frame(steadyL),aes(x=V1,y=V2,label=names)) + geom_text()
ggplot(steadyL.df,aes(x=V1,y=V2,label=names)) + geom_text()
steadyL[8:13,]
subSteadyL <- steadyL[8:13,]
plot(subgraph(steadyG,v = c(8:13)),subSteadyL)
plot(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
add_layout_(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
subSteadyL <- steadyL[8:13,]
plot(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
plot(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
add_layout_(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
subSteadyG <- subgraph(steadyG,v = c(8:13))
subSteadyG <- induced_subgraph(steadyG,v = c(8:13))
plot(subSteadyG,layout=subSteadyL)
plot(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,subSteadyL)
fastgreedy.community(subSteadyG)
steadyG <- graph.data.frame(steadystate, directed=F)
E(steadyG)$weight <- steadystate[,3]
superG <- graph.data.frame(superspreader, directed=F)
E(superG)$weight <- superspreader[,3]
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(steadyG)$weight))
plot(steadyG,layout=steadyL)
superL <- layout.fruchterman.reingold(superG, params=list(weights=E(superG)$weight))
plot(superG,layout=superL)
subSteadyL <- steadyL[8:13,]
subSteadyG <- induced_subgraph(steadyG,v = c(8:13))
plot(subSteadyG)
plot(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,subSteadyL)
add_layout_(subSteadyG,subSteadyL,overwrite = T)
add_layout_(subSteadyG,layout=subSteadyL,overwrite = T)
layout_
?layout_
add_layout_(subSteadyG,layout=subSteadyL,overwrite = T)
?graph_structure
?graph.structure
fastgreedy.community(superL)
fastgreedy.community(superG)
dendPlot(fastgreedy.community(superG))
dendPlot(fastgreedy.community(steadyG))
steadyC <- fastgreedy.community(steadyG)
steadyC$names
steadyC$membership
steadyC$merges
steadyC$modularity
dendPlot(fastgreedy.community(steadyG),use.modularity=T)
dendPlot(fastgreedy.community(steadyG),use.modularity=F)
as.phylo(fastgreedy.community(steadyG))
to.phylo(fastgreedy.community(steadyG))
dendPlot(fastgreedy.community(steadyG))
?sample
sample(1:10,replace=T)
library(knitr)
library(ggplot2)
```{r setup}
opts_chunk$set(fig.width=13, fig.height=8)
```
```{r}
pf100 <- read.table("Pf.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pf10000 <- read.table("Pf.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pf100$spp="Pf"
pf10000$spp="Pf"
pv100 <- read.table("Pv.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pv10000 <- read.table("Pv.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pv100$spp="Pv"
pv10000$spp="Pv"
pb100 <- read.table("Pb.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pb10000 <- read.table("Pb.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pb100$spp="Pb"
pb10000$spp="Pb"
pc100 <- read.table("Pc.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pc10000 <- read.table("Pc.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pc100$spp="Pc"
pc10000$spp="Pc"
pk100 <- read.table("Pk.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pk10000 <- read.table("Pk.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pk100$spp="Pk"
pk10000$spp="Pk"
p100 <- rbind(pf100,pv100,pk100,pb100,pc100)
p10000 <- rbind(pf10000,pv10000,pk10000,pb10000,pc10000)
```
```{r}
ggplot(p100,aes(x=spp,y=pc)) + geom_violin()
ggplot(p10000,aes(x=spp,y=pc)) + geom_violin()
p10000$pcblock <- round(p10000$pc*20)/20
p100$superblock <- round(p100$block/10000+1)*10000
setwd("~/Scratch/gits/broad_work/10X/reports/160317_GC_content_genomes/")
library(knitr)
library(ggplot2)
```{r setup}
opts_chunk$set(fig.width=13, fig.height=8)
```
```{r}
pf100 <- read.table("Pf.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pf10000 <- read.table("Pf.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pf100$spp="Pf"
pf10000$spp="Pf"
pv100 <- read.table("Pv.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pv10000 <- read.table("Pv.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pv100$spp="Pv"
pv10000$spp="Pv"
pb100 <- read.table("Pb.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pb10000 <- read.table("Pb.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pb100$spp="Pb"
pb10000$spp="Pb"
pc100 <- read.table("Pc.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pc10000 <- read.table("Pc.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pc100$spp="Pc"
pc10000$spp="Pc"
pk100 <- read.table("Pk.100.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pk10000 <- read.table("Pk.10000.GC.txt",stringsAsFactors = F,col.names=c("chr","block","gc","total","pc"))
pk100$spp="Pk"
pk10000$spp="Pk"
p100 <- rbind(pf100,pv100,pk100,pb100,pc100)
p10000 <- rbind(pf10000,pv10000,pk10000,pb10000,pc10000)
```
```{r}
ggplot(p100,aes(x=spp,y=pc)) + geom_violin()
ggplot(p10000,aes(x=spp,y=pc)) + geom_violin()
p10000$pcblock <- round(p10000$pc*20)/20
p100$superblock <- round(p100$block/10000+1)*10000
pcvar <- merge(p100,p10000[,c("block","pc","spp","pcblock")],by.x=c("chr","superblock","spp"),by.y=c("chr","block","spp"))
head(p100)
head(p10000)
pcvar <- merge(p100,p10000[,c("chr","block","pc","spp","pcblock")],by.x=c("chr","superblock","spp"),by.y=c("chr","block","spp"))
ggplot(pcvar,aes(x=pcblock,y=pc.x,group=pcblock)) + geom_violin(scale="width") + facet_grid(spp ~ .)
ggplot(pcvar,aes(x=pcblock,y=pc.x,group=pcblock)) + geom_violin(scale="count") + facet_grid(spp ~ .)
knit("GCcontent_genomes.Rmd")
knit("GCcontent_genomes.Rmd")
setwd("../../../../pfdisco/reports/160317_DD2_pacbio_validation/")
library(knitr)
library(ggplot2)
```{r setup}
opts_chunk$set(fig.width=13, fig.height=8)
```
```{r}
access <- read.table("DD2-2D4.align_cf.3D7_DD2.ACCESS.bed",stringsAsFactors = F)
colnames(access) <- c("chrom","st","en","var","IS","TD","VT","VC","LD","N1","C1","L1","NM1","N2","C2","L2","MN2")
access$Imatch <- (access$IS == (access$L2-access$L1))
sum(access$VC==1)
sum(access$VC==1 & access$Imatch)
sum(access$VC==1 & access$Imatch) / sum(access$VC==1)
sum(access$VC==1 & access$Imatch & abs(access$IS) < 20 / sum(access$VC==1)
\c
sum(access$VC==1 & access$Imatch & abs(access$IS) < 20) / sum(access$VC==1)
sum(access$VC==1 & access$Imatch & abs(access$IS) < 20) / sum(access$VC==1 & abs(access$IS) < 20)
ggplot(access,aes(x=IS,colour=Imatch)) + geom_density()
ggplot(access,aes(x=IS,colour=Imatch)) + geom_density() + xlim(-150,150)
ggplot(access,aes(x=IS,colour=Imatch)) + geom_density() + xlim(-100,100)
knit("pacBio_comparisons.Rmd")
head(access)
