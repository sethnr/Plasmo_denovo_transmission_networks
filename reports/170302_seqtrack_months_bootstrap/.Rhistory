test <- getEvolRates(varNets[[1]],indDists)
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
```
```{r}
opts_chunk$set(fig.width=10, fig.height=8)
opts_chunk$set(dev=c('png','postscript'))
```
```{r}
ped <- "Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.DISCORDS.vcf.gz_NJnex/Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.DISCORDS.gz.ped"
genos <- read.table(ped,colClasses="character")
inds <- genos[,1]
genos <- genos[,seq(7,dim(genos)[[2]],2)]
rownames(genos)=inds
meta <- read.table("Thies_metadata_1701.txt",sep="\t",header=T)
colnames(meta)[1]<-"name"
meta <- meta[!is.na(meta$Age),]
#tab<-"./Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.alleles.tab"
fileroot<-"ThiesDiscoAlleles_ped"
#read in ped file and get hamming distances:
#alleleTab <- read.table(tab,colClasses="character",header=T,na.strings = c("."))
c1 <- c("Th086.07","Th106.09","Th106.11","Th117.11","Th132.11","Th134.11","Th162.12","Th196.12","Th230.12","Th074.13")
#genos <- t(data.matrix(alleleTab[3:dim(alleleTab)[2]]))
genos <- genos[c1,]
inds <- c1
#  inds<-row.names(genos)
#   DNdistmat = matrix(nrow=length(c1),ncol=length(c1))
#   colnames(DNdistmat) = c1
#   rownames(DNdistmat) = c1
#
#   outs <- inds[(!inds %in% c1)]
#   write("calculating de novo distance matrix",stderr())
#
#   for (i in c1){
#       for (j in c1){
#         for (o in outs){
#             if(length(filled) > 0) {
#             meta[meta$name==i,"Date"] > meta[meta$name==j,"Date"]
#             distmat[i,j] =
#         }else {
#           distmat[i,j]=-1
#         }
#       }
#   }
#
distmat = matrix(nrow=length(inds),ncol=length(inds))
colnames(distmat) = inds
rownames(distmat) = inds
write("calculating distance matrix",stderr())
for (i in inds){
for (j in inds){
filled = intersect(which(genos[i,] != 0), which(genos[j,] !=0))
write(paste("calculating",i,"v",j),stderr())
write(length(filled),stderr())
#    distmat[i,j] = sum(genos[i,]!=genos[j,])
if(length(filled) > 0) {
distmat[i,j] = sum(genos[i,filled]!=genos[j,filled])
}else {
distmat[i,j]=-1
}
}
}
distmat <- as.dist(distmat)
net <- makeNetSingle(distmat,meta)
#printGraph(net,"Greens",tab)
distmatAllVars <- distmat
netAllVars <- net
#target:
#targetDist <- as.dist(sym(read.table("Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.vcf.dist.tab.txt",sep="\t")[c1,c1]))
#printGraph(makeNetSingle(targetDist,meta),"Greens","test")
genosStatic <- genos
outfolder <- "./bootstraps"
bstraps <- system("ls bootstraps/*",intern = T)
if (length(bstraps)>0) {write("using old bootstraps",stderr())
} else{
write("bootstrapping (100)",stderr())
for (boot in c(1:100)) {
bootsample <- sample(c(1:dim(genos)[2]),replace = T)
genos <- genosStatic[c1,bootsample]
inds <- c1
distmat = matrix(nrow=length(inds),ncol=length(inds))
colnames(distmat) = inds
rownames(distmat) = inds
write("calculating distance matrix",stderr())
for (i in inds){
for (j in inds){
filled = intersect(which(genos[i,] != 0), which(genos[j,] !=0))
if(length(filled) > 0) {
distmat[i,j] = sum(genos[i,filled]!=genos[j,filled])
}else {
distmat[i,j]=-1
}
}
}
distmat <- as.dist(distmat)
net <- makeNetSingle(distmat,meta)
#printGraph(net,"Greens",tab)
outnet=paste(".",outfolder, paste(fileroot,"c29",boot,'seqtrack.net',sep='.'),sep="/")
write.table(net,outnet,quote=F,row.names=F)
}
}
```
```{r}
bstraps <- system("ls bootstraps/*",intern = T)
blinks <- matrix(rep(0,length(inds)**2),nrow = length(inds),ncol=length(inds),dimnames = list(inds,inds))
for (b in bstraps) {
tab <- read.table(b,header=T)
for (i in c(1:dim(tab)[[1]])) {
#    write(paste(i,tab$ances[[i]]),stderr())
if (!is.na(tab$ances[i])) {
blinks[tab$id[i],tab$ances[i]] = blinks[tab$id[i],tab$ances[i]]+1
}
}
}
blinks
```
```{r}
meta <- read.table("Thies_metadata_1701.txt",sep="\t",header=T)
colnames(meta)[1]<-"name"
meta <- meta[meta$name %in% inds,]
row.names(meta) <- inds
meta$Date <- as.Date(as.character(meta$Date),"%d/%m/%Y",origin = "2000-01-01")
net <- netAllVars
net$type = "core"
net$boot = 0
for (t in inds) {
for (f in inds) {
fi = which(inds==f)
#write(paste(t,f,blinks[t,f],net[t,"ances"],is.na(net[t,"ances"]),net[t,"ances"] == fi),stderr())
if (blinks[t,f] > 0) {
if ((!is.na(net[t,"ances"])) & net[t,"ances"] == fi) {net[t,"boot"] = blinks[t,f]}
else {
nextI = dim(net)[[1]]+1
#        write(paste("  adding",nextI,":",leaf,ances,sep=" "),stderr())
#integers
net[nextI,c("id","ances","weight","year","boot")] <- c(which(inds==t), which(inds==f),as.matrix(distmat)[t,f],net[t,"year"], blinks[t,f])
net[nextI,4] <- meta[f,"Date"]
net[nextI,5] <- net[t,"date"]
net[nextI,7:8] <- c(t,"boot")
}
}
}
}
net
#plot(as.igraph(net))
cols <- brewer.pal((max(netAllVars$year)-min(netAllVars$year))+1, "Greens")
#get posns from allGraph:
ts=1.0 #textsize
igA <- as.igraph(netAllVars)
tree <- layout_as_tree(igA,flip.y = F)[,c(2,1)]
#manually push two further ahead
tree[inds %in% c("Th230.12","Th134.11"),1] <- 3.1
ig <- as.igraph(net)
V(ig)$name <- netAllVars$name
V(ig)$color <- cols[netAllVars$year-min(netAllVars$year)+1]
V(ig)$label.cex <- ts
#E(ig)$color <- factor(net$type,levels=c("core","boot"))[2:15]
E(ig)$lty <- as.numeric(factor(net$type,levels=c("core","boot"))[2:15])
#frame()
E(ig)$label <- paste(net$weight,(net$boot/100),sep="/")[2:15]
E(ig)$color <- as.character(factor(net$type,levels=c("core","boot"),labels=c("black","#888888"))[2:15])
E(ig)$weight <- as.numeric(factor(net$type,levels=c("boot","core"))[2:15])*2
E(ig)$weight
curves = rep(0,14)
#curves[net$type[2:15]=="boot"] <- -0.5
curves[c(10,11,12,13,14)] <- c(-0.1,0.1,-0.5,0.2,0.1)
plot.new()
plot(ig,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
```
```{r}
#nb: lat=Y, lon=X
meta$GPS <- as.character(meta$GPS)
meanLat <- mean(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")[3:10]))[,1]))
meanLon <- mean(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")[3:10]))[,2]))
maxLat <- max(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")[3:10]))[,1]))
medianLon <- median(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")[3:10]))[,2]))
#if this isn't Thies you're in trouble...
ggmap(get_map(location=c(meanLon,meanLat)))
#meta$GPS[1:2] <- paste(meanLon,meanLat,sep=", ")
meta$GPS[1] <- paste(maxLat+0.02,medianLon+0.01,sep=", ")
meta$GPS[2] <- paste(maxLat+0.02,medianLon-0.01,sep=", ")
#meta$GPS[1:2] <- c("14.8, -16.98","14.81, -16.98")
# gpspos <- cbind(scale(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")))[,1]),scale = F)[,1],
#               scale(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")))[,2]),scale = F)[,1])*10
gpspos <- matrix(as.numeric(t(as.data.frame(strsplit(meta$GPS,", ")))),ncol = 2)
#NB: gps in file: lat,lon == Y,X
#reverse for plotting
gpspos <- gpspos[,c(2,1)]
gpscurves <- rep(0,14)
#gpscurves[c(2,4,5)] <- c(-1,-1,20)
gpscurves[c(2,5)] <- c(+0.2,0)
plot.new()
plot(ig,layout=gpspos,vertex.size=5,
edge.curved=gpscurves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial",edge.label=NA)
#get graph with single-weighted edges
igW <- igA
E(igW)$weight <- 1
gdists <- distances(igW)
distdist <- data.frame(from=character(),
to=character(),
graphdist=integer(),
geodist=numeric(),
stringsAsFactors=F)
for (i in c(2:10)) {
for (j in c(i:10)) {
if (i != j) {
di <- dim(distdist)[[1]]+1
dist = sqrt(abs(gpspos[i,1]-gpspos[j,1])**2+abs(gpspos[i,2]-gpspos[j,2])**2)
write(paste(inds[i],inds[j],gdists[i,j],dist),stderr())
distdist[di,c(1:2)] <- c(inds[i],inds[j])
distdist[di,c(3:4)] <- c(gdists[i,j],dist)
}
}
}
distdist
#no correlation between graph distance and geographical distance
ggplot(distdist,aes(x=graphdist,y=geodist)) + geom_point() + geom_smooth(method = lm,se = F)
```
```{r}
# setwd("./TM_WORLD_BORDERS-0.3")
# worldmap <- readOGR(dsn=".",layer="TM_WORLD_BORDERS-0.3")
# setwd("../")
#
#
# #summary(worldmap)
#
# #sites <- read.table("sample_countries.txt",sep="\t",header=T)
# #meancountry <- aggregate(. ~ country, data=sites,FUN=mean)[,c("country","lat","lon")]
# #ggplot(sites,aes(x=lon,y=lat)) + geom_point()
#
# #africa <- worldmap[worldmap$REGION==2,]
# senegal <- worldmap[worldmap$NAME %in% c("Senegal","Gambia"),]
#
# senegal.f <- fortify(senegal)
# senegal@data$id <- rownames(senegal@data)
#
# senegal.f <- merge(senegal.f, senegal@data, by.x="id",by.y="id")
# # ggplot(senegal.f, aes(long, lat, group=group)) + geom_polygon(alpha=0,colour="gray50") +
# #   coord_equal() +
# #   #geom_point(data=sites,aes(x=lon,y=lat,ymax=lat,ymin=lat,colour=MS),size=5,inherit.aes=F, position=position_dodge(width=4)) +
# #   #geom_text(data=sites,aes(x=lon,y=lat,ymax=lat+5,ymin=lat-5,label=site),position=position_dodge(height=5),inherit.aes=F) +
# #   coord_fixed(ylim=c(-20,20))
#
# altraster <- raster("africa_altitude.2-5m.bil")
#
#
# senxlim=c(min(senegal.f$long),max(senegal.f$long))
# senylim=c(min(senegal.f$lat),max(senegal.f$lat))
#
# plot.new()
# plot(altraster,
#     xlim=senxlim,ylim=senylim,
#       col=colorRampPalette(c("white","gray50"))(200),
#       axes=F,ann=F,frame.plot=F,mar = rep(0, 4))
# plot(senegal,add=TRUE,border="gray40",lwd=0.5)
# plot(ig,add=TRUE,layout=gpspos,vertex.size=5,
#      edge.curved=gpscurves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
#      edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial",edge.label=NA)
#
#library(GGally)
ggmap(thies)
#igApure <- igA
igA <- as.igraph(netAllVars)
# V(igA)$latend <- gpspos[,1]
# V(igA)$lonend <- gpspos[,2]
# V(igA)$lat <- gpspos[netAllVars$ances,1]
# V(igA)$lon <- gpspos[netAllVars$ances,2]
E(igA)$latend <- gpspos[2:10,2]
E(igA)$lonend <- gpspos[2:10,1]
E(igA)$lat <- gpspos[na.omit(netAllVars$ances),2]
E(igA)$lon <- gpspos[na.omit(netAllVars$ances),1]
igf <- fortify(igA)
igf$vertex.names <- as.character(igf$vertex.names)
igf$vertex.names[1:10] <- inds
igf$lat[is.na(igf$weight)] <- gpspos[,2]
igf$lon[is.na(igf$weight)] <- gpspos[,1]
igf
# igf$x <- igf$lat
# igf$y <- igf$lon
# igf$xend <- igf$latend
# igf$yend <- igf$lonend
# igf$xend[is.na(igf$xend)] <- igf$x[is.na(igf$xend)]
# igf$yend[is.na(igf$yend)] <- igf$y[is.na(igf$yend)]
igf$latend[is.na(igf$weight)] <- igf$lat[is.na(igf$weight)]
igf$lonend[is.na(igf$weight)] <- igf$lon[is.na(igf$weight)]
#ggplot(data = igf,aes(x = lat, y = lon, xend = latend, yend = lonend)) +
library(ggmap)
#thies <- get_map(location = c(lon = meanLon, lat = meanLat), zoom = 12, maptype = 'terrain')
b=0.0
thies <- get_map(location=c(min(gpspos[,1])-b,min(gpspos[,2])-b,max(gpspos[,1])-b,max(gpspos[,2]-b)),zoom=12,maptype = "roadmap")
ggmap(thies)
ggmap(thies)+
geom_point(data=igf[is.na(igf$weight),], aes(x = lon, y = lat), size=2) +
geom_text(data=igf[is.na(igf$weight),],aes(label = vertex.names)) +
geom_edges(data = igf[!is.na(igf$weight),],aes(x = lon, y = lat, xend = lonend, yend = latend),arrow=arrow(length = unit(6, "pt"), type = "closed"),colour="black") +
theme_blank()
ggmap(thies)+
geom_label(data=igf[is.na(igf$weight),],aes(x = lon, y = lat, label = vertex.names),fontface = "bold") +
geom_edges(data = igf[!is.na(igf$weight),],aes(x = lon, y = lat, xend = lonend, yend = latend),arrow=arrow(length = unit(6, "pt"), type = "closed"),colour="black") +
theme_blank()
plot(ig)
write_graph(ig, "seqtrack_bootstrap_clade29.xml", format = c("graphml"))
plot(ig)
plot(netAllVars)
plot(netAllVars,vertex_text=name)
plot(ig,vertex_text=name)
plot(ig,vertex_text=Name)
plot(igA,vertex_text=Name)
plot(igA)
knit("seqtrack_months_boot.Rmd")
write_graph(netAllVars, "seqtrack_allvars_mths_clade29.xml", format = c("graphml"))
write_graph(igA, "seqtrack_allvars_mths_clade29.xml", format = c("graphml"))
plot(igA)
plot(ig)
V(igA)$name <- netAllVars$name
V(igA)$color <- cols[netAllVars$year-min(netAllVars$year)+1]
V(igA)$label.cex <- ts
#E(ig)$color <- factor(net$type,levels=c("core","boot"))[2:15]
E(igA)$lty <- as.numeric(factor(net$type,levels=c("core","boot"))[2:15])
E(igA)$label <- paste(net$weight,(net$boot/100),sep="/")[2:15]
E(igA)$label <- paste(netAllVars$weight,(net$boot/100),sep="/")[2:15]
E(igA)$weight
E(igA)$weight
write_graph(ig, "seqtrack_bootstrap_clade29.xml", format = c("graphml"))
write_graph(igA, "seqtrack_allvars_mths_clade29.xml", format = c("graphml"))
plot(igA)
hpnet <- read.graph("seqtrack_allvars_mths_clade29.HPLSY.xml",format="graphml")
plot(hpnet)
plot(ig,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
E(hpnet)$homoplasy_percentage
E(hpnet)
hpnet
edge_attr(hpnet)
edge_attr(hpnet)$homoplasy_percent
round(edge_attr(hpnet)$homoplasy_percent,2)
E(hpnet)$label
paste(net$weight,(net$boot/100),sep="/")[2:15]
paste(netAllVars$weight,(netAllVars$boot/100),sep="/")[2:15]
paste(netAllVars$weight,(netAllVars$boot/100),sep="/")[2:10]
paste(netAllVars$weight,(net$boot/100),sep="/")[2:10]
round(edge_attr(hpnet)$homoplasy_percent,2)
paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:10]
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:10]
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:10]
plot(hpnet,layout=tree,vertex.size=25,
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
knit("seqtrack_months_boot.Rmd")
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
hpnet <- read.graph("seqtrack_allvars_mths_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:10]
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
E(hpnet)$color = "black"
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves = rep(0,14)
#curves[net$type[2:15]=="boot"] <- -0.5
curves[c(10,11,12,13,14)] <- c(-0.1,0.1,-0.5,0.2,0.1)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves[c(10,11,12)] <- c(-0.1,0.1,-0.5)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves = rep(0,14)
curves[c(10,11,12)] <- c(-0.1,0.1,-0.5)
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves[c(11,12)] <- c(0.1,-0.5)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
E(hpnet)$label = c(1:15)
E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves[c(7,8,11,14)] <- c(-0.1,0.1,0.2,0.2)
curves = rep(0,14)
#curves[net$type[2:15]=="boot"] <- -0.5
#curves[c(10,11,12)] <- c(-0.1,0.1,-0.5,0.2,0.1)
curves[c(7,8,11,14)] <- c(-0.1,0.1,0.2,0.2)
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves[c(7,8,11,14)] <- c(-0.2,0.2,0.2,0.2)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
#E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves[c(7,8,11,14)] <- c(-0.2,0.4,0.2,0.2)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
#E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves[c(7,8,11,14)] <- c(-0.5,0.2,0.2,0.2)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(netAllVars$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
#E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
knit("seqtrack_months_boot.Rmd")
netAllVars
E(hpnet)$label = paste(net$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = paste(net$weight,round(edge_attr(hpnet)$homoplasy_percent,2),(net$boot/100),sep="/")[2:15]
#E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
knit("seqtrack_months_boot.Rmd")
E(hpnet)$label = round(edge_attr(hpnet)$homoplasy_percent,2)
#E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
E(hpnet)$label = round(edge_attr(hpnet)$homoplasy_percent,2)
plot.new()
E(hpnet)$color = "black"
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
#NB: don't try and combine with previous graphs, edge order is rearranged
E(hpnet)$label = round(edge_attr(hpnet)$homoplasy_percent,2)
plot.new()
E(hpnet)$color = "black"
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
curves = rep(0,14)
#curves[net$type[2:15]=="boot"] <- -0.5
#curves[c(10,11,12)] <- c(-0.1,0.1,-0.5,0.2,0.1)
curves[c(7,8,11,14)] <- c(-0.5,0.2,0.2,0.2)
hpnet <- read.graph("seqtrack_bootstrap_clade29.HPLSY.xml",format="graphml")
E(hpnet)$label = round(edge_attr(hpnet)$homoplasy_percent,2)
#E(hpnet)$label = c(1:14)
plot.new()
plot(hpnet,layout=tree,vertex.size=25,
edge.curved=curves,edge.width=as.numeric(factor(net$type,levels=c("boot","core"))[2:15]),
edge.label.cex=1,edge.label.family="Arial",vertex.label.family="Arial")
```{r}
knit("seqtrack_months_boot.Rmd")
