setwd("/Volumes//gsap_garage-protistvector/sredmond/broad_10Xmicrobial/reports/160824_snr_snp_LDs/")
knit("snpLDReport.Rmd")
library(knitr)
knit("snpLDReport.Rmd")
knit("snpLDReport.Rmd")
plotmatrix(ld55,aes())
library(ggplot2)
library(hexbin)
library(reshape2)
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
```{r setup}
opts_chunk$set(fig.width=12, fig.height=8,dev='png',warning=F)
```
```{r}
ld55 <- read.table("HuMal900505.vcf.gz.bx.2.Pf3D7_09_v31000000-1500000.ld",header=F,stringsAsFactors=F)
ld55$sample="0505"
ld91 <- read.table("HuMal900505.vcf.gz.bx.2.Pf3D7_09_v31000000-1500000.ld",header=F,stringsAsFactors=F)
ld91$sample="0901"
ld <- rbind(ld91,ld55)
posns = read.table("HuMal900505.vcf.gz.bx.2.Pf3D7_09_v31000000-1500000.map")[,4]
colnames(ld55)<-posns
rownames(ld55)<-posns
melt(ld55)
ggplot(ld,aes(x=SNP_A,y=SNP_B,colour=R2)) + geom_tile() + facet_grid(. ~ sample)
head(ld)
ldm <- melt(ld55)
head(ldm)
plotmatrix(ld55,aes())
library(ggplot2)
plotmatrix(ld55,aes())
ldm
ldm <- melt(ld)
head(ld)
setwd("~/Scratch/gits/pfdisco/reports/170519_variantsOnTrees/")
library(ape)
library(ape)
library(adegenet)
library(ape)
library(adegenet)
library(phangorn)
library(knitr)
library(igraph)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
require(gridExtra)
opts_chunk$set(fig.width=9, fig.height=9)
opts_chunk$set(dev=c('png','postscript'))
sym <- function(M) {
M[lower.tri(M)] = t(M)[lower.tri(M)]
M
}
makeDist <- function(distance_matrix_file, meta_file, ngroups=3) {
mat <- read.table(distance_matrix_file,sep="\t")
D <- as.dist(sym(mat))
clust <- gengraph(D,ngrp=ngroups)
names <- colnames(mat)
mat <- as.matrix(mat)
name1 <- names[clust$clust$membership==1]
name2 <- names[clust$clust$membership==2]
name3 <- names[clust$clust$membership==3]
dist1 <- mat[name1,name1]
dist2 <- mat[name2,name2]
dist3 <- mat[name3,name3]
list(dist1,dist2,dist3)
}
meta <- read.table("Thies_metadata_1701.txt",sep="\t",header=T)
colnames(meta)[1]<-"name"
meta <- meta[!is.na(meta$Age),]
indelDists <- read.table("Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.INDEL.recode.vcf.dist.tab.txt",header=T,sep="\t")
snpDists <- read.table("Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.SNP.recode.vcf.dist.tab.txt",header=T,sep="\t")
discoDists <- indelDists+snpDists
meta <- subset(meta,name %in% names(indelDists))
rownames(meta) <- meta$name
gatkDists <- read.table("thies_300100_haplo.CALLHAPLO.RENAME.dist.tab",header=T,sep="\t")
gatkDistsCore <- read.table("thies_300100_haplo.CALLBOTH.RENAME.dist.tab.txt",header=T,sep="\t")
cl1 <- c("Th086.07", "Th106.09", "Th106.11", "Th117.11", "Th132.11", "Th134.11", "Th162.12", "Th196.12", "Th230.12", "Th074.13")
cl1yrs <- as.numeric(gsub(".*\\.","",cl1))
og1<-"Th166.12"
oc1 <- c("Th166.12", "Th092.13", "Th211.13", "Th245.13", "Th246.13")
og2<-"Th068.12"
oc2 <- c("Th068.12", "Th061.13", "Th095.13")
cog1 <- c(cl1,og1)
cog2 <- c(cl1,og2)
njtree1 <- nj(as.dist(sym(discoDists)))
njtree1 <- midpoint(njtree1)
njtree1 <- drop.tip(njtree1,c(oc1,oc2))
plot(njtree1)
alleleTab <- read.table("Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.miss-1.alleles.tab",colClasses="character",header=T,na.strings = c("."))
alleleTab <- read.table("Thies_all_manual.PASS.Cls.miss0.5.LMRG.HAP.miss-1.alleles.tab",colClasses="character",header=T,na.strings = c("."))
genos <- t(data.matrix(alleleTab[6:dim(alleleTab)[2]]))
inds <- row.names(genos)
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
fitch(njtree1,genosDat,site = "site")
parsimony(njtree1,genosDat)
parsTree <- pratchet(genosDat,njtree1)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
fitch(njtree1,genosDat,site = "site")
parsimony(njtree1,genosDat)
parsTree <- pratchet(genosDat,njtree1)
plot(parsTree)
plot(parsTree)
lento(parsTree)
parsTree <- pratchet(genosDat,njtree1)
plot(parsTree)
lento(parsTree)
plot(njtree1)
getSplitSupports <- function(tree,genos) {
#  samps <- c(1:dim(genos)[[1]])
samps <- tree$tip.label
splitSupports <- data.frame(splits=character(),
null=numeric(),
irrelevant=numeric(),
pro=numeric(),
anti=numeric(),
stringsAsFactors = F)
splits <- as.splits(tree)
write(paste(c((length(samps)+1):length(splits)),sep=", "),stderr())
for (si in c((length(samps)+1):length(splits))) {
split <- samps[splits[[si]]]
outs <- samps[!samps %in% split]
#if (length(split)==1) {next}
#  write(split,stderr())
calcs <- apply(genos,2,function(x) {
sAll <- na.omit(unique(x[split]))
oAll <- na.omit(unique(x[outs]))
comm <- intersect(sAll,oAll)
sLen <- length(sAll)
oLen <- length(oAll)
cLen <- length(comm)
if (sLen > 2) {sLen<-2}
if (oLen > 2) {oLen<-2}
if (cLen > 1) {cLen<-1}
cat <- paste(c(sLen,cLen,oLen),sep="",collapse="")
if (sLen==0 | oLen==0 | cat =="111") {
return("null") #if null or monomorphic
}
if (cat %in% c("101","102","201","202")) {
return("support")
}
if (cat %in% c("112","211")) {
return("no support")
}
if (cat == "212") {
return("against")
}
write(cat,stderr())
return(cat)
})
#write(table(calcs),stderr())
# write(paste(split,sep=",",collapse =","),stderr())
# write(table(calcs)[c("null","no support","support","against")],stderr())
nextI = dim(splitSupports)[[1]]+1
splitSupports[nextI,"splits"] = paste(split,sep=",",collapse =",")
counts <- table(calcs)[c("null","no support","support","against")]
counts[is.na(counts)] <- 0
splitSupports[nextI,c("null","irrelevant","pro","anti")] = counts
}
return(splitSupports)
}
getSplitPlot <- function(tree) {
#  samps <- c(1:dim(genos)[[1]])
samps <- tree$tip.label
splitPlot <- data.frame(splits=character(),
sample=character(),
insplit=numeric(),
stringsAsFactors = F)
splits <- as.splits(tree)
write(paste(c((length(samps)+1):length(splits)),sep=", "),stderr())
for (si in c((length(samps)+1):length(splits))) {
split <- samps[splits[[si]]]
outs <- samps[!samps %in% split]
#if (length(split)==1) {next}
splitStr = paste(split,sep=",",collapse =",")
write(paste(si,splitStr,length(splits)),stderr())
for (s in split) {
nextI = dim(splitPlot)[[1]]+1
splitPlot[nextI,"splits"] = splitStr
splitPlot[nextI,"sample"] = s
splitPlot[nextI,"insplit"] = 1}
for (s in outs) {
nextI = dim(splitPlot)[[1]]+1
splitPlot[nextI,"splits"] = splitStr
splitPlot[nextI,"sample"] = s
splitPlot[nextI,"insplit"] = 0}
}
treeOrder <- tree$tip.label[tree$edge[c(tree$edge[,2] <= length(tree$tip.label)),2]]
splitPlot$sample <- factor(splitPlot$sample,levels=treeOrder,ordered=T)
return(splitPlot)
}
njSupp <- getSplitSupports(njtree1,genos[cl1,])
njSupp <- getSplitSupports(njtree1,genos[cl1,])
parsSupp <- getSplitSupports(parsTree,genos[cl1,])
njSplits <- getSplitPlot(njtree1)
splitSort <- njSupp$splits[rev(order(njSupp$pro))]
njSplits$splits <- factor(njSplits$splits,levels=splitSort, ordered=T)
njSupp$splits <- factor(njSupp$splits,levels=splitSort, ordered=T)
splitP <- ggplot(subset(njSplits,insplit==1),aes(x=splits,y=sample)) + geom_point(shape=1, size=3)
njsupP <- ggplot(njSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-100,500) + ggtitle("discovar, neighbour-joining tree lento plot")
blankTheme <- theme(axis.title=element_blank(),axis.text.y = element_blank(),
axis.text.x=element_text(angle=90,hjust=1))
plot(njtree1)
njsupP + blankTheme
splitP + blankTheme
grid.arrange(njsupP + blankTheme, splitP+blankTheme, ncol=1)
parsSupp <- getSplitSupports(parsTree,genos[cl1,])
parsSupp <- getSplitSupports(parsTree,genos[cl1,])
parsSplits <- getSplitPlot(parsTree)
parsSplitSort <- parsSupp$splits[rev(order(parsSupp$pro))]
parsSplits$splits <- factor(parsSplits$splits,levels=parsSplitSort, ordered=T)
parsSupp$splits <- factor(parsSupp$splits,levels=parsSplitSort, ordered=T)
splitP <- ggplot(subset(parsSplits,insplit==1),aes(x=splits,y=sample)) + geom_point(shape=1, size=3)
parssupP <- ggplot(parsSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-100,500) + ggtitle("discovar, parsimony tree lento plot")
blankTheme <- theme(axis.title=element_blank(),axis.text.y = element_blank(),
axis.text.x=element_text(angle=90,hjust=1))
plot(parsTree)
parssupP + blankTheme
