0 1 5
0 2 4
0 3 3
0 4 2
0 5 1"))
edges <- read.table(text="
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1")
steadystate <- read.table(text="
0 1 2
0 2 2
1 3 2
1 4 2
2 5 2
2 6 2
3 7 2
4 8 2
4 9 2
5 10 2
6 11 2
6 12 2")
graph.data.frame(steadystate, directed=F)
plot(graph.data.frame(steadystate, directed=F))
plot(graph.data.frame(steadystate, directed=T))
plot(graph.data.frame(superspreader, directed=T))
superspreader <- read.table(text="
0 1 5
0 2 4
0 3 3
0 4 2
0 5 1")
steadystate <- read.table(text="
0 1 2
0 2 2
1 3 2
1 4 2
2 5 2
2 6 2
3 7 2
4 8 2
4 9 2
5 10 2
6 11 2
6 12 2")
plot(graph.data.frame(steadystate, directed=T))
plot(graph.data.frame(superspreader, directed=T))
?plot
source('~/.active-rstudio-document', echo=TRUE)
plot(graph.data.frame(superspreader, directed=T),)
superspreader <- read.table(text="
0 1 6 T
0 2 5 T
0 3 4 T
0 4 3 T
0 5 2 T
0 6 1 T")
steadystate <- read.table(text="
0 1 2 F
0 2 2 F
1 3 2 F
1 4 2 F
2 5 2 F
2 6 2 F
3 7 2 T
4 8 2 T
4 9 2 T
5 10 2 T
6 11 2 T
6 12 2 T")
plot(graph.data.frame(steadystate, directed=T))
plot(graph.data.frame(superspreader, directed=T))
dendPlot(graph.data.frame(superspreader, directed=T))
steadyG <- graph.data.frame(steadystate, directed=T)
superG <- graph.data.frame(superspreader, directed=T)
steadyG <- graph.data.frame(steadystate, directed=T)
superG <- graph.data.frame(superspreader, directed=T)
plot(steadyG)
plot(superG)
plot(as.dendrogram(steadyG))
dendPlot(as.dendrogram(steadyG))
as.dendrogram(steadyG)
g001 <- erdos.renyi.game(100, 1/10, directed = FALSE)
fc01 <- fastgreedy.community(g001)
fc01
g001
fc01
as.dendrogram(fc01)
as.dendrogram(g001)
superComm <- fastgreedy.community(superG)
superG <- graph.data.frame(superspreader, directed=T)
dendPlot(fastgreedy.community(superG))
superG <- graph.data.frame(superspreader, directed=F)
dendPlot(fastgreedy.community(superG))
dendPlot(fastgreedy.community(steadyG))
steadyG <- graph.data.frame(steadystate, directed=F)
superG <- graph.data.frame(superspreader, directed=F)
dendPlot(fastgreedy.community(superG))
dendPlot(fastgreedy.community(steadyG))
fastgreedy.community(superG)
fastgreedy.community(steadyG)
plot(steadyG)
subgraph.edges(steadyG, E(steadyG)[label %in% c(7:12)])
subgraph.edges(steadyG, E(steadyG)[V3 %in% c(7:12)])
plot(subgraph.edges(steadyG, E(steadyG)[V3 %in% c(7:12)]))
steadyG
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T))
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T])
)
?subgraph.edges
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T],delete_vertices=F)
)
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T],delete.vertices=F))
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T])
)
plot(subgraph.edges(steadyG, E(steadyG)[V4 == T]))
superG<-set.edge.attribute(superG, "weight", index=E(superG), value=weights)
superG<-set.edge.attribute(superG, "weight", index=E(superG), value=V3)
set.edge.attribute
superG<-set.edge.attribute(superG, "weight", index=E(superG)[,3])
E(superG)[,3]
E(superG)[,3]
E(superG)
V(superG)
superG[,3]
superG[,2]
superG
superG$V3
superG[["V3"]]
superG["V3"]
steadyG <- graph.data.frame(steadystate, directed=F)
superG <- graph.data.frame(superspreader, directed=F)
plot(steadyG)
dendPlot(fastgreedy.community(steadyG))
fastgreedy.community(steadyG)
make_clusters(superG)
?VertexDendrogram
as.phylo(steadyG)
import(ape)
library(ape)
as.phylo(steadyG)
tr <- rtree(5)
tr
as.igraph(tr)
as.hclust(steadyG)
a <- list()  # initialize empty object
# define merging pattern:
#    negative numbers are leaves,
#    positive are merged clusters (defined by row number in $merge)
a$merge <- matrix(c(-1, -2,
-3, -4,
1,  2), nc=2, byrow=TRUE )
a$height <- c(1, 1.5, 3)    # define merge heights
a$order <- 1:4              # order of leaves(trivial if hand-entered)
a$labels <- LETTERS[1:4]    # labels of leaves
class(a) <- "hclust"        # make it an hclust object
plot(a)                     # look at the result
a$merge
plot(induced_subgraph(steadyG,c(7:12))
)
plot(induced_subgraph(steadyG,c(7:12),impl="create_from_scratch"))
plot(induced_subgraph(steadyG,c(7:12),impl="copy_and_delete"))
plot(steadyG)
steadyG <- graph.data.frame(steadystate, directed=T)
superG <- graph.data.frame(superspreader, directed=T)
plot(steadyG)
plot(superG)
steadyG
V(steadyG)
V(steadyG)[5]
E(steadyG)[5]
E(steadyG)
E(steadyG)$weights
E(steadyG)$weight
E(steadyG)$weight <- steadystate[,3]
plot(steadyG)
E(steadyG)$weight
superG <- graph.data.frame(superspreader, directed=T)
E(superG)$weight <- superspreader[,3]
plot(superG)
E(steadyG)$colour="red"
plot(steadyG)
superL <- layout.fruchterman.reingold(superG, weights=E(superG)$weight)
steadyL <- layout.fruchterman.reingold(steadyG, weights=E(steadyG)$weight)
superG <- graph.data.frame(superspreader, directed=T)
E(superG)$weight <- superspreader[,3]
superL <- layout.fruchterman.reingold(superG, weights=E(superG)$weight)
plot(steadyG,layout=superL)
E(superG)$weight
plot(steadyG,layout=steadyL)
plot(superG,layout=superL)
plot(steadyG,layout=steadyL)
superL <- layout.fruchterman.reingold(superG, weights=E(superG)$weight)
superL
g <- graph.ring(10)
E(g)$weight <- 1:2
l <- layout.fruchterman.reingold(g, weights=E(g)$weight)
plot(g, layout=l)
superL <- layout.drl(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
steadyL <- layout.drl(steadyG, weights=E(steadyG)$weight)
plot(steadyG,layout=steadyL)
superL <- layout.drl(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
superspreader <- read.table(text="
0 1 1 T
0 2 2 T
0 3 3 T
0 4 4 T
0 5 5 T
0 6 6 T")
steadystate <- read.table(text="
0 1 2 F
0 2 2 F
1 3 2 F
1 4 2 F
2 5 2 F
2 6 2 F
3 7 2 T
4 8 2 T
4 9 2 T
5 10 2 T
6 11 2 T
6 12 2 T")
steadyG <- graph.data.frame(steadystate, directed=T)
E(steadyG)$weight <- steadystate[,3]
superG <- graph.data.frame(superspreader, directed=T)
E(superG)$weight <- superspreader[,3]
steadyL <- layout.drl(steadyG, weights=E(steadyG)$weight)
plot(steadyG,layout=steadyL)
superL <- layout.drl(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
superL <- layout.sugiyama(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
superL <- layout.sugiyama(superG, weights=E(superG)$weight)
plot(superG,layout=superL)
plot(superG,edge.length=E(superG)$weight)
plot(superG,edge.weight=E(superG)$weight)
plot(superG,edge.width=E(superG)$weight)
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(g)$weight))
list(weights=E(g)$weight)
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(g)$weight))
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(steadyG)$weight))
plot(steadyG,layout=steadyL)
superL <- layout.fruchterman.reingold(superG, params=list(weights=E(superG)$weight))
plot(superG,edge.width=E(superG)$weight)
plot(superG,layout=superL)
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(steadyG)$weight))
plot(steadyG,layout=steadyL)
?Dendrogram
??Dendrogram
cluster_leading_eigen(steadyG)
cluster_leading_eigen(subgraph(steadyG,v = c(7:12))
\c
plot(subgraph(steadyG,v = c(7:12)))
plot(subgraph(steadyG,v = c(8:13)))
plot(steradyG)
plot(steadyG)
layout(steadyG)
plot(subgraph(steadyG,v = c(8:13)))
plot(subgraph(steadyG,v = c(8:13)),layout=steadyG)
steadyG
steadyL
as.data.frame(steadyL)
ggplot(as.data.frame(steadyL),aes(x=V1,y=V2)) + geom_point()
library(ggplot2)
ggplot(as.data.frame(steadyL),aes(x=V1,y=V2)) + geom_point()
steadyL.df <- as.data.frame(steadyL)
steadyL.df$names <- V(steadyG)
steadyL.df$names <- steadystate[,3]
steadyL.df$names <- steadystate[7:12,3]
steadyL.df$names <- steadystate[,3]
steadyL.df$names <- c(0:12)
ggplot(as.data.frame(steadyL),aes(x=V1,y=V2,label=names)) + geom_text()
ggplot(steadyL.df,aes(x=V1,y=V2,label=names)) + geom_text()
steadyL[8:13,]
subSteadyL <- steadyL[8:13,]
plot(subgraph(steadyG,v = c(8:13)),subSteadyL)
plot(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
add_layout_(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
subSteadyL <- steadyL[8:13,]
plot(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
plot(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
add_layout_(subgraph(steadyG,v = c(8:13)),layout=subSteadyL)
subSteadyG <- subgraph(steadyG,v = c(8:13))
subSteadyG <- induced_subgraph(steadyG,v = c(8:13))
plot(subSteadyG,layout=subSteadyL)
plot(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,subSteadyL)
fastgreedy.community(subSteadyG)
steadyG <- graph.data.frame(steadystate, directed=F)
E(steadyG)$weight <- steadystate[,3]
superG <- graph.data.frame(superspreader, directed=F)
E(superG)$weight <- superspreader[,3]
steadyL <- layout.fruchterman.reingold(steadyG, params=list(weights=E(steadyG)$weight))
plot(steadyG,layout=steadyL)
superL <- layout.fruchterman.reingold(superG, params=list(weights=E(superG)$weight))
plot(superG,layout=superL)
subSteadyL <- steadyL[8:13,]
subSteadyG <- induced_subgraph(steadyG,v = c(8:13))
plot(subSteadyG)
plot(subSteadyG,layout=subSteadyL)
add_layout_(subSteadyG,subSteadyL)
add_layout_(subSteadyG,subSteadyL,overwrite = T)
add_layout_(subSteadyG,layout=subSteadyL,overwrite = T)
layout_
?layout_
add_layout_(subSteadyG,layout=subSteadyL,overwrite = T)
?graph_structure
?graph.structure
fastgreedy.community(superL)
fastgreedy.community(superG)
dendPlot(fastgreedy.community(superG))
dendPlot(fastgreedy.community(steadyG))
steadyC <- fastgreedy.community(steadyG)
steadyC$names
steadyC$membership
steadyC$merges
steadyC$modularity
dendPlot(fastgreedy.community(steadyG),use.modularity=T)
dendPlot(fastgreedy.community(steadyG),use.modularity=F)
as.phylo(fastgreedy.community(steadyG))
to.phylo(fastgreedy.community(steadyG))
dendPlot(fastgreedy.community(steadyG))
?sample
sample(1:10,replace=T)
setwd("~/Scratch/gits/pfdisco/reports/160301_thies_indelRatios_redo/")
knit("thies_indel_ratios.Rmd")
library(knitr)
knit("thies_indel_ratios.Rmd")
library(ggplot2)
library(reshape2)
library(knitr)
knit("thies_indel_ratios.Rmd")
setwd("../160304_3D7DD2_indelRatios/")
total_dist <- read.table("3D7DD2.REFCALL.noMinor.NoLaneErr.IncIncons.dist.tab.txt",header=T,row.names=1,sep="\t")
distances <- merge(
melt(as.matrix(total_dist),value.name ="total"),
by=c("Var1","Var2")
\cv
distances <-  melt(as.matrix(total_dist),value.name ="total")
diostances
distances
distances <- distances[!is.na(distances$total),]
ratios <- read.table("3D7DD2.REFCALL.noMinor.NoLaneErr.IncIncons.indel-snp.tab.txt",header=T,row.names=1,sep="\t")
ratios <-  melt(as.matrix(ratios),value.name ="total")
ratios
distances <- distances[!is.na(distances$total),]
ratios <- ratios[!is.na(distances$total),]
distances
distances$related[distances$total >= 10000] <- "UNRELATED"
distances$related[distances$total < 10000] <- "RELATED"
merge(distances,ratios,by=c("Var_1","Var_2"))
head(distances)
merge(distances,ratios,by=c("Var1","Var2"))
distances <-  melt(as.matrix(total_dist),value.name ="total")
ratios <-  melt(as.matrix(ratios),value.name ="total")
distances <- merge(distances,ratios,by=c("Var1","Var2"))
distances <- distances[!is.na(distances$total),]
total_dist <- read.table("3D7DD2.REFCALL.noMinor.NoLaneErr.IncIncons.dist.tab.txt",header=T,row.names=1,sep="\t")
ratios_tab <- read.table("3D7DD2.REFCALL.noMinor.NoLaneErr.IncIncons.indel-snp.tab.txt",header=T,row.names=1,sep="\t")
distances <-  melt(as.matrix(total_dist),value.name ="total")
ratios <-  melt(as.matrix(ratios),value.name ="total")
distances <- merge(distances,ratios,by=c("Var1","Var2"))
head(distances)
distances <-  melt(as.matrix(total_dist),value.name ="total")
ratios <-  melt(as.matrix(ratios),value.name ="total")
head(distances)
head(ratios)
head(ratio_tab)
head(ratios_tab)
ratios <-  melt(as.matrix(ratios),value.name ="ratio")
head(ratios)
distances <-  melt(as.matrix(total_dist),value.name ="total")
ratios <-  melt(as.matrix(ratios_tab),value.name ="ratio")
head(ratios)
strsub('.','_',ratios$Var2)
gsub('.','_',ratios$Var2)
gsub('\.','_',ratios$Var2)
gsub('\\.','_',ratios$Var2)
gsub('\\.','-',ratios$Var2)
ratios$Var2<-gsub('\\.','-',ratios$Var2)
ratios$Var2<-gsub('\\.','-',ratios$Var2)
distances <- merge(distances,ratios,by=c("Var1","Var2"))
distances <- distances[!is.na(distances$total),]
head(distances)
head(distances)
head(ratios)
distances <-  melt(as.matrix(total_dist),value.name ="total")
ratios <-  melt(as.matrix(ratios_tab),value.name ="ratio")
ratios$Var2<-gsub('\\.','-',ratios$Var2)
head(ratios)
head(distances)
merge(distances,ratios,by=c("Var1","Var2"))
as.character(distances$Var1)
distances$Var1 <- as.character(distances$Var1)
distances$Var2 <- as.character(distances$Var2)
ratios$Var1 <- as.character(ratios$Var1)
ratios$Var2 <- as.character(ratios$Var2)
merge(distances,ratios,by=c("Var1","Var2"))
merge(distances,ratios,by=c("Var1"))
ratios$Var2<-gsub('\\.','-',ratios$Var2)
merge(distances,ratios,by=c("Var1"))
gsub('\\.','-',ratios$Var2)
gsub('\\.','-',ratios$Var2)
gsub('\\.','-',distances$Var2)
merge(distances,ratios,by=c("Var1"))
head(merge(distances,ratios,by=c("Var1")))
gsub('\\.','-',distances$Var2)
distances$Var2
distances$Var2 <- gsub('\\.','-',distances$Var2)
distances$Var1 <- as.character(distances$Var1)
distances$Var2 <- as.character(distances$Var2)
ratios$Var1 <- as.character(ratios$Var1)
ratios$Var2 <- as.character(ratios$Var2)
merge(distances,ratios,by=c("Var1","Var2"))
distances <- merge(distances,ratios,by=c("Var1","Var2"))
distances <- distances[!is.na(distances$total),]
distances$related[distances$total >= 10000] <- "UNRELATED"
distances$related[distances$total < 10000] <- "RELATED"
distances$ratioP <- NA
ID_unrelated <- c(sum(distances$indel[distances$related=="UNRELATED"]),sum(distances$snp[distances$related=="UNRELATED"]))
ID_related <- c(sum(distances$indel[distances$related=="RELATED"]),sum(distances$snp[distances$related=="RELATED"]))
tab <- cbind(ID_unrelated,ID_related)
colnames(tab)<-c("unrelated","related"); rownames(tab) <- c("indel","snp")
tab
fisher.test(tab)
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(distances,aes(x=Var1,y=Var2,fill=interval_yrs)) + geom_tile() + vxlab
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio_t)) + geom_tile(size=1) +
geom_text(aes(colour=ratioP < 0.01),size=4) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour=ratioP < 0.01),size=4) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=4) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
source('~/.active-rstudio-document', echo=TRUE)
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=4) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
tstv_tab <- read.table("3D7DD2.REFCALL.noMinor.NoLaneErr.IncIncons.tstv.tab.txt",header=T,row.names=1,sep="\t")
tstv <-  melt(as.matrix(tstv_tab),value.name ="tstv")
tstv$Var2 <- gsub('\\.','-',tstv$Var2)
tstv$Var1 <- as.character(tstv$Var1)
tstv$Var2 <- as.character(tstv$Var2)
distances <-  melt(as.matrix(total_dist),value.name ="total")
ratios <-  melt(as.matrix(ratios_tab),value.name ="ratio")
tstv <-  melt(as.matrix(tstv_tab),value.name ="tstv")
ratios$Var2<-gsub('\\.','-',ratios$Var2)
distances$Var2 <- gsub('\\.','-',distances$Var2)
tstv$Var2 <- gsub('\\.','-',tstv$Var2)
distances$Var1 <- as.character(distances$Var1)
distances$Var2 <- as.character(distances$Var2)
ratios$Var1 <- as.character(ratios$Var1)
ratios$Var2 <- as.character(ratios$Var2)
tstv$Var1 <- as.character(tstv$Var1)
tstv$Var2 <- as.character(tstv$Var2)
#merge(distances,ratios,by=c("Var1","Var2"))
#distances <- distances[distances$Var1!=distances$Var2,]
distances <- merge(distances,ratios,by=c("Var1","Var2"))
distances <- merge(distances,tstv,by=c("Var1","Var2"))
distances <- distances[!is.na(distances$total),]
distances$related[distances$total >= 10000] <- "UNRELATED"
distances$related[distances$total < 10000] <- "RELATED"
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=4) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=tstv,label=tstv)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=4) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=6) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=tstv,label=tstv)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=6) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=6) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("ts:tv")
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=6) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("SNP:INDEL")
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=tstv,label=tstv)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=6) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("ts:tv")
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=tstv,label=tstv)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=6) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("ts:tv")
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=5) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("SNP:INDEL")
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=tstv,label=tstv)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=5) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("ts:tv")
ggplot(distances,aes(x=Var1,y=Var2,fill=total,label=total,colour=related)) + geom_tile() + scale_fill_gradient(trans="log") + geom_text(size=3) + relcol + vxlab
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=ratio,label=ratio)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=5) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("SNP:INDEL")
ggplot(subset(distances,related=="RELATED"),aes(x=Var1,y=Var2,fill=tstv,label=tstv)) + geom_tile(size=1) +
geom_text(aes(colour="white"),size=5) +
geom_text(data=subset(distances,related=="UNRELATED"),size=4) + sigcol + vxlab + ggtitle("ts:tv")
