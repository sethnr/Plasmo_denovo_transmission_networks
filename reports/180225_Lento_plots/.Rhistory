discobootnet <- addBootToNet(netDisco,discosum,discoDists)
hap100bootnet <- addBootToNet(netHap100,hap100sum,hap100Dists)
hap250bootnet <- addBootToNet(netHap250,hap250sum,hap250Dists)
discobootnet
gatkbootnet
hap250bootnet
discobootnet
hap100bootnet
hap250bootnet
knit("MEP.Rmd")
discoMEPtab
discoMEPtab$prog <- "disco"
hap100MEPtab$prog <- "haplo100"
hap250MEPtab$prog <- "haplo250"
cfMEPtab<-rbind(discoMEPtab,hap100MEPtab,hap250MEPtab)
ggplot(cfMEPtab,aes(x=yrs,y=rtdist,label=sample)) + geom_text(size=4) + geom_smooth(method = lm,se=F,linetype=2) +
geom_label(x=8,y=mean(TDtab1$rtdist),label=paste("R=",round(ct1$estimate,3)," p=",round(ct1$p.value,4),sep=""),size=5) + facet_grid(. ~ prog) +
ggtitle("hap250, distance-time correlation extended genome")
?library
is.numeric()
?nnls.phylo
setwd("../180225_Lento_plots/")
```{r}
library(ape)
library(adegenet)
library(phangorn)
library(knitr)
library(igraph)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
require(gridExtra)
opts_chunk$set(dev=c('png','postscript'))
sym <- function(M) {
M[lower.tri(M)] = t(M)[lower.tri(M)]
M
}
makeDist <- function(distance_matrix_file, meta_file, ngroups=3) {
mat <- read.table(distance_matrix_file,sep="\t")
D <- as.dist(sym(mat))
clust <- gengraph(D,ngrp=ngroups)
names <- colnames(mat)
mat <- as.matrix(mat)
name1 <- names[clust$clust$membership==1]
name2 <- names[clust$clust$membership==2]
name3 <- names[clust$clust$membership==3]
dist1 <- mat[name1,name1]
dist2 <- mat[name2,name2]
dist3 <- mat[name3,name3]
list(dist1,dist2,dist3)
}
getSplitSupports <- function(tree,genos) {
#  samps <- c(1:dim(genos)[[1]])
samps <- tree$tip.label
splitSupports <- data.frame(splits=character(),
null=numeric(),
irrelevant=numeric(),
pro=numeric(),
anti=numeric(),
stringsAsFactors = F)
splits <- as.splits(tree)
write(paste(c((length(samps)+1):length(splits)),sep=", "),stderr())
for (si in c((length(samps)+1):length(splits))) {
split <- samps[splits[[si]]]
outs <- samps[!samps %in% split]
#if (length(split)==1) {next}
if (length(split)==length(samps)) {next}
#  write(split,stderr())
calcs <- apply(genos,2,function(x) {
sAll <- na.omit(unique(x[split]))
oAll <- na.omit(unique(x[outs]))
comm <- intersect(sAll,oAll)
sLen <- length(sAll)
oLen <- length(oAll)
cLen <- length(comm)
if (sLen > 2) {sLen<-2}
if (oLen > 2) {oLen<-2}
if (cLen > 1) {cLen<-1}
cat <- paste(c(sLen,cLen,oLen),sep="",collapse="")
if (sLen==0 | oLen==0 | cat =="111") {
return("null") #if null or monomorphic
}
if (cat %in% c("101","102","201","202")) {
return("support")
}
if (cat %in% c("112","211")) {
return("no support")
}
if (cat == "212") {
return("against")
}
write(cat,stderr())
return(cat)
})
#write(table(calcs),stderr())
# write(paste(split,sep=",",collapse =","),stderr())
# write(table(calcs)[c("null","no support","support","against")],stderr())
nextI = dim(splitSupports)[[1]]+1
splitSupports[nextI,"splits"] = paste(split,sep=",",collapse =",")
counts <- table(calcs)[c("null","no support","support","against")]
counts[is.na(counts)] <- 0
splitSupports[nextI,c("null","irrelevant","pro","anti")] = counts
}
return(splitSupports)
}
getSplitPlot <- function(tree) {
#  samps <- c(1:dim(genos)[[1]])
samps <- tree$tip.label
splitPlot <- data.frame(splits=character(),
sample=character(),
insplit=numeric(),
stringsAsFactors = F)
splits <- as.splits(tree)
write(paste(c((length(samps)+1):length(splits)),sep=", "),stderr())
for (si in c((length(samps)+1):length(splits))) {
split <- samps[splits[[si]]]
outs <- samps[!samps %in% split]
#if (length(split)==1) {next}
if (length(split)==length(samps)) {next}
splitStr = paste(split,sep=",",collapse =",")
write(paste(si,splitStr,length(splits)),stderr())
for (s in split) {
nextI = dim(splitPlot)[[1]]+1
splitPlot[nextI,"splits"] = splitStr
splitPlot[nextI,"sample"] = s
splitPlot[nextI,"insplit"] = 1}
for (s in outs) {
nextI = dim(splitPlot)[[1]]+1
splitPlot[nextI,"splits"] = splitStr
splitPlot[nextI,"sample"] = s
splitPlot[nextI,"insplit"] = 0}
}
treeOrder <- tree$tip.label[tree$edge[c(tree$edge[,2] <= length(tree$tip.label)),2]]
splitPlot$sample <- factor(splitPlot$sample,levels=treeOrder,ordered=T)
splitPlot$insplit <- as.logical(splitPlot$insplit)
return(splitPlot)
}
blankTheme <- theme(axis.title=element_blank(),axis.text = element_blank())
blankThemeLab <- theme(axis.title=element_blank(),axis.text.y = element_blank(),
axis.text.x=element_text(angle=90,hjust=1))
meta <- read.table("Thies_metadata_1701.txt",sep="\t",header=T)
colnames(meta)[1]<-"name"
meta <- meta[!is.na(meta$Age),]
meta <- read.table("Thies_metadata_1701.txt",sep="\t",header=T)
colnames(meta)[1]<-"name"
meta <- meta[!is.na(meta$Age),]
discoDists <- read.table("thies_disco.FILT.m0.5.dist.tab.txt",header=T,sep="\t")
meta <- subset(meta,name %in% names(discoDists))
rownames(meta) <- meta$name
discoDists <- read.table("thies_disco.FILT.m0.5.vcf.gz.dist.tab.txt",header=T,sep="\t")
meta <- subset(meta,name %in% names(discoDists))
rownames(meta) <- meta$name
hap100Dists <- read.table("thies_haplo100.FILT.m0.5.dist.tab.txt",header=T,sep="\t")
hap100Dists <- read.table("thies_haplo100.FILT.m0.5.vcf.gz.dist.tab.txt",header=T,sep="\t")
hap250Dists <- read.table("thies_haplo250.FILT.m0.5.vcf.gz.dist.tab.txt",header=T,sep="\t")
samples <- read.table("Thies.samples.txt",col.names=c("ID","lane","dataset","sample","bam"))
samples <- read.table("../180224_core_callable_VQSLOD90/Thies.samples.txt",col.names=c("ID","lane","dataset","sample","bam"))
samples <- unique(samples[,c("ID","sample")])
snames <- samples[,c("ID")]; samples<- as.character(samples[,c("sample")]) ; names(samples) <- snames
names(hap100Dists) <- samples[rownames(hap100Dists)]
rownames(hap100Dists) <- samples[rownames(hap100Dists)]
cl1 <- c("Th086.07", "Th106.09", "Th106.11", "Th117.11", "Th132.11", "Th134.11", "Th162.12", "Th196.12", "Th230.12", "Th074.13")
cl1yrs <- as.numeric(gsub(".*\\.","",cl1))
og1<-"Th166.12"
oc1 <- c("Th166.12", "Th092.13", "Th211.13", "Th245.13", "Th246.13")
cl2 <- c("Th166.12", "Th092.13", "Th211.13", "Th245.13", "Th246.13")
og2<-"Th068.12"
oc2 <- c("Th068.12", "Th061.13", "Th095.13")
cl3 <- c("Th068.12", "Th061.13", "Th095.13")
cog1 <- c(cl1,og1)
cog2 <- c(cl1,og2)
alleleTab <- read.table("thies_disco.FILT.m0.5.alleles.tab",colClasses="character",header=T,na.strings = c("."))
genos <- t(data.matrix(alleleTab[6:dim(alleleTab)[2]]))
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
njtree1 <- nj(as.dist(sym(discoDists)))
njtree1 <- midpoint(njtree1)
njtree1 <- drop.tip(njtree1,c(oc1,oc2))
plot(njtree1)
parsTree <- pratchet(genosDat) # ,njtree1)
parsTree <- nnls.phylo(parsTree,dist.hamming(genosDat))
parsTree <- midpoint(parsTree)
parsTree <- drop.tip(parsTree,c(oc1,oc2))
plot(parsTree)
discoLocs <- paste(alleleTab[,1],alleleTab[,2])
discoLocs <- paste(alleleTab[,1],alleleTab[,2])
discoLocs
as.splits(parsTree)[11:19] %in% as.splits(parstreeGATK)[11:19]
parsSupp <- getSplitSupports(parsTree,genos[cl1,])
parsSupp
parsSplits <- getSplitPlot(parsTree)
splitSort <- parsSupp$splits[rev(order(parsSupp$pro))]
parsSplits$splits <- factor(parsSplits$splits,levels=splitSort, ordered=T)
splitP <- ggplot(njSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
splitP <- ggplot(parsSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
parssupP <- ggplot(parsSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-100,500)
splitP
njsupP
parssupP
parsSupp <- getSplitSupports(parsTree,genos[cl1,])
parsSuppIn <- getSplitSupports(parsTree,genos[cl1,discInHap])
parsSuppOut <- getSplitSupports(parsTree,genos[cl1,!discInHap])
parsSuppIn$inHap=T
parsSuppOut$inHap=F
parsSuppComb = rbind(parsSuppIn,parsSuppOut)
grid.arrange(parssupP + blankTheme, splitP+blankTheme, ncol=1)
library(ape)
library(adegenet)
library(phangorn)
library(knitr)
library(igraph)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
require(gridExtra)
opts_chunk$set(fig.width=9, fig.height=9)
opts_chunk$set(dev=c('png','postscript'))
```
```{r}
sym <- function(M) {
M[lower.tri(M)] = t(M)[lower.tri(M)]
M
}
makeDist <- function(distance_matrix_file, meta_file, ngroups=3) {
mat <- read.table(distance_matrix_file,sep="\t")
D <- as.dist(sym(mat))
clust <- gengraph(D,ngrp=ngroups)
names <- colnames(mat)
mat <- as.matrix(mat)
name1 <- names[clust$clust$membership==1]
name2 <- names[clust$clust$membership==2]
name3 <- names[clust$clust$membership==3]
dist1 <- mat[name1,name1]
dist2 <- mat[name2,name2]
dist3 <- mat[name3,name3]
list(dist1,dist2,dist3)
}
```
```{r}
getSplitSupports <- function(tree,genos) {
#  samps <- c(1:dim(genos)[[1]])
samps <- tree$tip.label
splitSupports <- data.frame(splits=character(),
null=numeric(),
irrelevant=numeric(),
pro=numeric(),
anti=numeric(),
stringsAsFactors = F)
splits <- as.splits(tree)
write(paste(c((length(samps)+1):length(splits)),sep=", "),stderr())
for (si in c((length(samps)+1):length(splits))) {
split <- samps[splits[[si]]]
outs <- samps[!samps %in% split]
#if (length(split)==1) {next}
if (length(split)==length(samps)) {next}
#  write(split,stderr())
calcs <- apply(genos,2,function(x) {
sAll <- na.omit(unique(x[split]))
oAll <- na.omit(unique(x[outs]))
comm <- intersect(sAll,oAll)
sLen <- length(sAll)
oLen <- length(oAll)
cLen <- length(comm)
if (sLen > 2) {sLen<-2}
if (oLen > 2) {oLen<-2}
if (cLen > 1) {cLen<-1}
cat <- paste(c(sLen,cLen,oLen),sep="",collapse="")
if (sLen==0 | oLen==0 | cat =="111") {
return("null") #if null or monomorphic
}
if (cat %in% c("101","102","201","202")) {
return("support")
}
if (cat %in% c("112","211")) {
return("no support")
}
if (cat == "212") {
return("against")
}
write(cat,stderr())
return(cat)
})
#write(table(calcs),stderr())
# write(paste(split,sep=",",collapse =","),stderr())
# write(table(calcs)[c("null","no support","support","against")],stderr())
nextI = dim(splitSupports)[[1]]+1
splitSupports[nextI,"splits"] = paste(split,sep=",",collapse =",")
counts <- table(calcs)[c("null","no support","support","against")]
counts[is.na(counts)] <- 0
splitSupports[nextI,c("null","irrelevant","pro","anti")] = counts
}
return(splitSupports)
}
getSplitPlot <- function(tree) {
#  samps <- c(1:dim(genos)[[1]])
samps <- tree$tip.label
splitPlot <- data.frame(splits=character(),
sample=character(),
insplit=numeric(),
stringsAsFactors = F)
splits <- as.splits(tree)
write(paste(c((length(samps)+1):length(splits)),sep=", "),stderr())
for (si in c((length(samps)+1):length(splits))) {
split <- samps[splits[[si]]]
outs <- samps[!samps %in% split]
#if (length(split)==1) {next}
if (length(split)==length(samps)) {next}
splitStr = paste(split,sep=",",collapse =",")
write(paste(si,splitStr,length(splits)),stderr())
for (s in split) {
nextI = dim(splitPlot)[[1]]+1
splitPlot[nextI,"splits"] = splitStr
splitPlot[nextI,"sample"] = s
splitPlot[nextI,"insplit"] = 1}
for (s in outs) {
nextI = dim(splitPlot)[[1]]+1
splitPlot[nextI,"splits"] = splitStr
splitPlot[nextI,"sample"] = s
splitPlot[nextI,"insplit"] = 0}
}
treeOrder <- tree$tip.label[tree$edge[c(tree$edge[,2] <= length(tree$tip.label)),2]]
splitPlot$sample <- factor(splitPlot$sample,levels=treeOrder,ordered=T)
splitPlot$insplit <- as.logical(splitPlot$insplit)
return(splitPlot)
}
blankTheme <- theme(axis.title=element_blank(),axis.text = element_blank())
blankThemeLab <- theme(axis.title=element_blank(),axis.text.y = element_blank(),
axis.text.x=element_text(angle=90,hjust=1))
```
```{r}
meta <- read.table("Thies_metadata_1701.txt",sep="\t",header=T)
colnames(meta)[1]<-"name"
meta <- meta[!is.na(meta$Age),]
discoDists <- read.table("thies_disco.FILT.m0.5.vcf.gz.dist.tab.txt",header=T,sep="\t")
meta <- subset(meta,name %in% names(discoDists))
rownames(meta) <- meta$name
hap100Dists <- read.table("thies_haplo100.FILT.m0.5.vcf.gz.dist.tab.txt",header=T,sep="\t")
hap250Dists <- read.table("thies_haplo250.FILT.m0.5.vcf.gz.dist.tab.txt",header=T,sep="\t")
samples <- read.table("../180224_core_callable_VQSLOD90/Thies.samples.txt",col.names=c("ID","lane","dataset","sample","bam"))
samples <- unique(samples[,c("ID","sample")])
snames <- samples[,c("ID")]; samples<- as.character(samples[,c("sample")]) ; names(samples) <- snames
#fix names for hap100 tree
names(hap100Dists) <- samples[rownames(hap100Dists)]
rownames(hap100Dists) <- samples[rownames(hap100Dists)]
```
```{r}
cl1 <- c("Th086.07", "Th106.09", "Th106.11", "Th117.11", "Th132.11", "Th134.11", "Th162.12", "Th196.12", "Th230.12", "Th074.13")
cl1yrs <- as.numeric(gsub(".*\\.","",cl1))
og1<-"Th166.12"
oc1 <- c("Th166.12", "Th092.13", "Th211.13", "Th245.13", "Th246.13")
cl2 <- c("Th166.12", "Th092.13", "Th211.13", "Th245.13", "Th246.13")
og2<-"Th068.12"
oc2 <- c("Th068.12", "Th061.13", "Th095.13")
cl3 <- c("Th068.12", "Th061.13", "Th095.13")
cog1 <- c(cl1,og1)
cog2 <- c(cl1,og2)
```
discoAlleles <- read.table("thies_disco.FILT.m0.5.alleles.tab",colClasses="character",header=T,na.strings = c("."))
genos <- t(data.matrix(discoAlleles[6:dim(discoAlleles)[2]]))
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
discoPTree <- pratchet(genosDat) # ,njtree1)
discoPTree <- nnls.phylo(discoPTree,dist.hamming(genosDat))
discoPTree <- midpoint(discoPTree)
discoPTree <- drop.tip(discoPTree,c(oc1,oc2))
discoLocs <- paste(discoAlleles[,1],discoAlleles[,2])
discoPSupp <- getSplitSupports(discoPTree,genos[cl1,])
discoPSplits <- getSplitPlot(discoPTree)
splitSort <- discoPSupp$splits[rev(order(discoPSupp$pro))]
discoPSplits$splits <- factor(discoPSplits$splits,levels=splitSort, ordered=T)
splitP <- ggplot(discoPSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
discoPSupP <- ggplot(discoPSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-100,500)
grid.arrange(discoPSupP + blankTheme, splitP+blankTheme, ncol=1)
hap100Alleles <- read.table("thies_haplo100.FILT.m0.5.alleles.tab",colClasses="character",header=T,na.strings = c("."))
genos <- t(data.matrix(hap100Alleles[6:dim(hap100Alleles)[2]]))
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
hap100PTree <- pratchet(genosDat) # ,njtree1)
hap100PTree <- nnls.phylo(hap100PTree,dist.hamming(genosDat))
hap100PTree <- midpoint(hap100PTree)
hap100PTree <- drop.tip(hap100PTree,c(oc1,oc2))
hap100PSupp <- getSplitSupports(hap100PTree,genos[cl1,])
hap250Alleles <- read.table("thies_haplo250.FILT.m0.5.alleles.tab",colClasses="character",header=T,na.strings = c("."))
genos <- t(data.matrix(hap250Alleles[6:dim(hap250Alleles)[2]]))
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
hap250PTree <- pratchet(genosDat) # ,njtree1)
hap250PTree <- nnls.phylo(hap250PTree,dist.hamming(genosDat))
hap250PTree <- midpoint(hap250PTree)
hap250PTree <- drop.tip(hap250PTree,c(oc1,oc2))
hap250PSupp <- getSplitSupports(hap250PTree,genos[cl1,])
hap250PSplits <- getSplitPlot(hap250PTree)
splitSort <- hap250PSupp$splits[rev(order(hap250PSupp$pro))]
hap250PSplits$splits <- factor(hap250PSplits$splits,levels=splitSort, ordered=T)
splitP <- ggplot(hap250PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-250,500)
grid.arrange(hap250PSupP + blankTheme, splitP+blankTheme, ncol=1)
splitP
hap250PSupP
hap250PSplits
hap250PSplits <- getSplitPlot(hap250PTree)
plot(hap250PTree)
splitP <- ggplot(hap250PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-250,500)
hap250PSupp
splitP <- ggplot(hap250PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-250,500)
grid.arrange(hap250PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap250PSupp
discoPSupp
discoAlleles <- read.table("thies_disco.FILT.m0.5.alleles.tab",colClasses="character",header=T,na.strings = c("."))
genos <- t(data.matrix(discoAlleles[6:dim(discoAlleles)[2]]))
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
discoPTree <- pratchet(genosDat) # ,njtree1)
discoPTree <- nnls.phylo(discoPTree,dist.hamming(genosDat))
discoPTree <- midpoint(discoPTree)
discoPTree <- drop.tip(discoPTree,c(oc1,oc2))
discoPSupp <- getSplitSupports(discoPTree,genos[cl1,])
discoPSplits <- getSplitPlot(discoPTree)
splitSort <- discoPSupp$splits[rev(order(discoPSupp$pro))]
discoPSplits$splits <- factor(discoPSplits$splits,levels=splitSort, ordered=T)
splitP <- ggplot(discoPSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
discoPSupP <- ggplot(discoPSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-100,500)
grid.arrange(discoPSupP + blankTheme, splitP+blankTheme, ncol=1)
discoPSupp
discoPSplits
splitP
splitP <- ggplot(hap250PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
splitP
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-250,500)
hap250PSupP
hap250PSupp
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red")
hap250PSupP
grid.arrange(hap250PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap250PSupP
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-750,750)
hap250PSupP
grid.arrange(hap250PSupP + blankTheme, splitP+blankTheme, ncol=1)
discoPSupP <- ggplot(discoPSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-750,750)
grid.arrange(discoPSupP + blankTheme, splitP+blankTheme, ncol=1)
write.table(round(discoPSupp[,3:5] / rowSums(discoPSupp[,3:5]),2),sep="\t",quote=F)
mean(discoPSupp[,4]/rowSums(discoPSupp[,4:5]))
write.table(discoPSupp[,3:5],quote=F)
write.table(round(discoPSuppGATK[,3:5] / rowSums(discoPSuppGATK[,3:5]),2),sep="\t",quote=F)
write.table(round(hap250PSupp[,3:5] / rowSums(hap250PSupp[,3:5]),2),sep="\t",quote=F)
mean(hap250PSupp[,4]/rowSums(hap250PSupp[,4:5]))
write.table(discoPSuppGATK[,3:5],quote=F)
write.table(hap250PSupp[,3:5],quote=F)
write.table(round(hap100PSupp[,3:5] / rowSums(hap100PSupp[,3:5]),2),sep="\t",quote=F)
head(hap100Alleles)
cnames <- col.names(hap100Alleles)
cnames <- colnames(hap100Alleles)
cnames
hap100Alleles <- read.table("thies_haplo100.FILT.m0.5.alleles.tab",colClasses="character",header=T,na.strings = c("."))
cnames <- gsub("SM.","SM-",colnames(hap100Alleles))
cnames[cnames %in% names(samples)] <- samples[cnames[cnames %in% names(samples)]]
colnames(hap100Alleles) <- cnames
genos <- t(data.matrix(hap100Alleles[6:dim(hap100Alleles)[2]]))
inds <- row.names(genos)
genosDat <- as.phyDat(genos, type="USER", levels = c(0:max(genos,na.rm=T)))
hap100PTree <- pratchet(genosDat) # ,njtree1)
hap100PTree <- nnls.phylo(hap100PTree,dist.hamming(genosDat))
hap100PTree <- midpoint(hap100PTree)
hap100PTree <- drop.tip(hap100PTree,c(oc1,oc2))
hap100PSupp <- getSplitSupports(hap100PTree,genos[cl1,])
hap100PSplits <- getSplitPlot(hap100PTree)
splitSort <- hap100PSupp$splits[rev(order(hap100PSupp$pro))]
hap100PSplits$splits <- factor(hap100PSplits$splits,levels=splitSort, ordered=T)
splitP <- ggplot(hap100PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
hap100PSupP <- ggplot(hap100PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-100,500)
grid.arrange(hap100PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap100PSupP <- ggplot(hap100PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-7500,7500)
hap100PSupP <- ggplot(hap100PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-750,750)
grid.arrange(hap100PSupP + blankTheme, splitP+blankTheme, ncol=1)
splitSort <- hap100PSupp$splits[rev(order(hap100PSupp$pro))]
hap100PSplits$splits <- factor(hap100PSplits$splits,levels=splitSort, ordered=T)
splitSort
hap100PSupp$pro
hap100PSupp
hap100PSupp
hap100PSupp$splits <- factor(hap100Supp$splits,levels=splitSort, ordered=T)
hap100PSupp$splits <- factor(hap100PSupp$splits,levels=splitSort, ordered=T)
splitP <- ggplot(hap100PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
hap100PSupP <- ggplot(hap100PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-750,750)
grid.arrange(hap100PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap100PSupP <- ggplot(hap100PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-1600,750)
grid.arrange(hap100PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap100PSupP <- ggplot(hap100PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-1600,1750)
grid.arrange(hap100PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap250PSupp$splits <- factor(hap250PSupp$splits,levels=splitSort, ordered=T)
splitP <- ggplot(hap250PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
splitP
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-750,750)
hap250PSupP
grid.arrange(hap250PSupP + blankTheme, splitP+blankTheme, ncol=1)
hap250PSupp <- getSplitSupports(hap250PTree,genos[cl1,])
hap250PSplits <- getSplitPlot(hap250PTree)
splitSort <- hap250PSupp$splits[rev(order(hap250PSupp$pro))]
hap250PSplits$splits <- factor(hap250PSplits$splits,levels=splitSort, ordered=T)
hap250PSupp$splits <- factor(hap250PSupp$splits,levels=splitSort, ordered=T)
splitP <- ggplot(hap250PSplits,aes(x=splits,y=sample,fill=insplit)) + geom_point(shape=21, size=3) + scale_fill_manual(values=c(NA,"black"),guide=F)
splitP
hap250PSupP <- ggplot(hap250PSupp,aes(x=splits)) + geom_bar(aes(y=pro),stat="identity",fill="blue") + geom_bar(aes(y=(anti*-1)),stat="identity",fill="red") + ylim(-750,750)
hap250PSupP
grid.arrange(hap250PSupP + blankTheme, splitP+blankTheme, ncol=1)
knit("variantsOnTrees.Rmd")
knit("variantsOnTrees.Rmd")
plot(hap100PTree)
plot(discoPTree)
knit("variantsOnTrees.Rmd")
